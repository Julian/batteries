{"name":"Batteries.Data.UInt","instances":[{"typeNames":["UInt8"],"name":"instLawfulOrdUInt8","className":"Batteries.LawfulCmp"},{"typeNames":["UInt16"],"name":"instLawfulOrdUInt16","className":"Batteries.LawfulCmp"},{"typeNames":["UInt32"],"name":"instLawfulOrdUInt32","className":"Batteries.LawfulCmp"},{"typeNames":["UInt64"],"name":"instLawfulOrdUInt64","className":"Batteries.LawfulCmp"},{"typeNames":["USize"],"name":"instLawfulOrdUSize","className":"Batteries.LawfulCmp"}],"imports":["Init","Batteries.Classes.Order"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L188-L189","name":"instLawfulOrdUSize","line":188,"kind":"instance","docLink":"./Batteries/Data/UInt.html#instLawfulOrdUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#instLawfulOrdUSize\"><span class=\"name\">instLawfulOrdUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.LawfulOrd\">Batteries.LawfulOrd</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L185-L186","name":"USize.le_antisymm","line":185,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.le_antisymm\"><span class=\"name\">USize</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L182-L183","name":"USize.le_antisymm_iff","line":182,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.le_antisymm_iff\"><span class=\"name\">USize</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L180-L180","name":"USize.toNat_mul","line":180,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toNat_mul\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L177-L178","name":"USize.toNat_sub","line":177,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toNat_sub\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#USize.size\">USize.size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L175-L175","name":"USize.toNat_add","line":175,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toNat_add\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L173-L173","name":"UInt32.toUSize_toNat","line":173,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toUSize_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toUSize_toNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUSize_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUSize</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L170-L171","name":"USize.toUInt64_toNat","line":170,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toUInt64_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toUInt64_toNat\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt64_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt64</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L167-L168","name":"USize.toNat_lt","line":167,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toNat_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toNat_lt\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L162-L165","name":"USize.size_le","line":162,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.size_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.size_le\"><span class=\"name\">USize</span>.<span class=\"name\">size_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#USize.size\">USize.size</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L157-L160","name":"USize.le_size","line":157,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.le_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.le_size\"><span class=\"name\">USize</span>.<span class=\"name\">le_size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L154-L155","name":"USize.size_eq","line":154,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.size_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.size_eq\"><span class=\"name\">USize</span>.<span class=\"name\">size_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#USize.size\">USize.size</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L151-L152","name":"USize.toNat_ofNat","line":151,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.toNat_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.toNat_ofNat\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L149-L149","name":"USize.val_val_eq_toNat","line":149,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.val_val_eq_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.val_val_eq_toNat\"><span class=\"name\">USize</span>.<span class=\"name\">val_val_eq_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L146-L146","name":"USize.ext","line":146,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#USize.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#USize.ext\"><span class=\"name\">USize</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L141-L142","name":"instLawfulOrdUInt64","line":141,"kind":"instance","docLink":"./Batteries/Data/UInt.html#instLawfulOrdUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#instLawfulOrdUInt64\"><span class=\"name\">instLawfulOrdUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.LawfulOrd\">Batteries.LawfulOrd</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L138-L139","name":"UInt64.le_antisymm","line":138,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.le_antisymm\"><span class=\"name\">UInt64</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L135-L136","name":"UInt64.le_antisymm_iff","line":135,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.le_antisymm_iff\"><span class=\"name\">UInt64</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L133-L133","name":"UInt64.toNat_mul","line":133,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toNat_mul\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt64.size\">UInt64.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L130-L131","name":"UInt64.toNat_sub","line":130,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toNat_sub\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.size\">UInt64.size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt64.size\">UInt64.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L128-L128","name":"UInt64.toNat_add","line":128,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toNat_add\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt64.size\">UInt64.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L126-L126","name":"UInt64.toUInt32_toNat","line":126,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toUInt32_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toUInt32_toNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt32_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt32</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L124-L124","name":"UInt64.toUInt16_toNat","line":124,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toUInt16_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toUInt16_toNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt16_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt16</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L122-L122","name":"UInt64.toUInt8_toNat","line":122,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toUInt8_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toUInt8_toNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt8_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt8</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L120-L120","name":"UInt64.toNat_lt","line":120,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toNat_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toNat_lt\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L117-L118","name":"UInt64.toNat_ofNat","line":117,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.toNat_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.toNat_ofNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt64.size\">UInt64.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L115-L115","name":"UInt64.val_val_eq_toNat","line":115,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.val_val_eq_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.val_val_eq_toNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">val_val_eq_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L112-L112","name":"UInt64.ext","line":112,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt64.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt64.ext\"><span class=\"name\">UInt64</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L107-L108","name":"instLawfulOrdUInt32","line":107,"kind":"instance","docLink":"./Batteries/Data/UInt.html#instLawfulOrdUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#instLawfulOrdUInt32\"><span class=\"name\">instLawfulOrdUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.LawfulOrd\">Batteries.LawfulOrd</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L104-L105","name":"UInt32.le_antisymm","line":104,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.le_antisymm\"><span class=\"name\">UInt32</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L101-L102","name":"UInt32.le_antisymm_iff","line":101,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.le_antisymm_iff\"><span class=\"name\">UInt32</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L99-L99","name":"UInt32.toNat_mul","line":99,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toNat_mul\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt32.size\">UInt32.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L96-L97","name":"UInt32.toNat_sub","line":96,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toNat_sub\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.size\">UInt32.size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt32.size\">UInt32.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L94-L94","name":"UInt32.toNat_add","line":94,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toNat_add\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt32.size\">UInt32.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L92-L92","name":"UInt32.toUInt64_toNat","line":92,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toUInt64_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toUInt64_toNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt64_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt64</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L90-L90","name":"UInt32.toUInt16_toNat","line":90,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toUInt16_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toUInt16_toNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt16_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt16</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L88-L88","name":"UInt32.toUInt8_toNat","line":88,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toUInt8_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toUInt8_toNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt8_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt8</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L86-L86","name":"UInt32.toNat_lt","line":86,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toNat_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toNat_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L83-L84","name":"UInt32.toNat_ofNat","line":83,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.toNat_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.toNat_ofNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt32.size\">UInt32.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L81-L81","name":"UInt32.val_val_eq_toNat","line":81,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.val_val_eq_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.val_val_eq_toNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">val_val_eq_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L78-L78","name":"UInt32.ext","line":78,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt32.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt32.ext\"><span class=\"name\">UInt32</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L73-L74","name":"instLawfulOrdUInt16","line":73,"kind":"instance","docLink":"./Batteries/Data/UInt.html#instLawfulOrdUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#instLawfulOrdUInt16\"><span class=\"name\">instLawfulOrdUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.LawfulOrd\">Batteries.LawfulOrd</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L70-L71","name":"UInt16.le_antisymm","line":70,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.le_antisymm\"><span class=\"name\">UInt16</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L67-L68","name":"UInt16.le_antisymm_iff","line":67,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.le_antisymm_iff\"><span class=\"name\">UInt16</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L65-L65","name":"UInt16.toNat_mul","line":65,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toNat_mul\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt16.size\">UInt16.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L62-L63","name":"UInt16.toNat_sub","line":62,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toNat_sub\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.size\">UInt16.size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt16.size\">UInt16.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L60-L60","name":"UInt16.toNat_add","line":60,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toNat_add\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt16.size\">UInt16.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L58-L58","name":"UInt16.toUInt64_toNat","line":58,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toUInt64_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toUInt64_toNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt64_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt64</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L56-L56","name":"UInt16.toUInt32_toNat","line":56,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toUInt32_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toUInt32_toNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt32_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt32</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L54-L54","name":"UInt16.toUInt8_toNat","line":54,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toUInt8_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toUInt8_toNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt8_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt8</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L52-L52","name":"UInt16.toNat_lt","line":52,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toNat_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toNat_lt\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L49-L50","name":"UInt16.toNat_ofNat","line":49,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.toNat_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.toNat_ofNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt16.size\">UInt16.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L47-L47","name":"UInt16.val_val_eq_toNat","line":47,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.val_val_eq_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.val_val_eq_toNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">val_val_eq_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L44-L44","name":"UInt16.ext","line":44,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt16.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt16.ext\"><span class=\"name\">UInt16</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L39-L40","name":"instLawfulOrdUInt8","line":39,"kind":"instance","docLink":"./Batteries/Data/UInt.html#instLawfulOrdUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#instLawfulOrdUInt8\"><span class=\"name\">instLawfulOrdUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.LawfulOrd\">Batteries.LawfulOrd</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L36-L37","name":"UInt8.le_antisymm","line":36,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.le_antisymm\"><span class=\"name\">UInt8</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L33-L34","name":"UInt8.le_antisymm_iff","line":33,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.le_antisymm_iff\"><span class=\"name\">UInt8</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L31-L31","name":"UInt8.toNat_mul","line":31,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toNat_mul\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt8.size\">UInt8.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L28-L29","name":"UInt8.toNat_sub","line":28,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toNat_sub\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.size\">UInt8.size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt8.size\">UInt8.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L26-L26","name":"UInt8.toNat_add","line":26,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toNat_add\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt8.size\">UInt8.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L24-L24","name":"UInt8.toUInt64_toNat","line":24,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toUInt64_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toUInt64_toNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt64_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt64</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L22-L22","name":"UInt8.toUInt32_toNat","line":22,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toUInt32_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toUInt32_toNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt32_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt32</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L20-L20","name":"UInt8.toUInt16_toNat","line":20,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toUInt16_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toUInt16_toNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt16_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toUInt16</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L18-L18","name":"UInt8.toNat_lt","line":18,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toNat_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toNat_lt\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L15-L16","name":"UInt8.toNat_ofNat","line":15,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.toNat_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.toNat_ofNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#UInt8.size\">UInt8.size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L13-L13","name":"UInt8.val_val_eq_toNat","line":13,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.val_val_eq_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.val_val_eq_toNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">val_val_eq_toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/UInt.lean#L10-L10","name":"UInt8.ext","line":10,"kind":"theorem","docLink":"./Batteries/Data/UInt.html#UInt8.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/UInt.html#UInt8.ext\"><span class=\"name\">UInt8</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toNat</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toNat</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"}]}