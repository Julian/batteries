{"name":"Batteries.Data.Vector.Basic","instances":[{"typeNames":["Batteries.Vector"],"name":"Batteries.instReprVector","className":"Repr"},{"typeNames":["Eq"],"name":"Batteries.instDecidableEqVector","className":"Decidable"},{"typeNames":["Batteries.Vector"],"name":"Batteries.Vector.instInhabited","className":"Inhabited"},{"typeNames":["Batteries.Vector","Nat"],"name":"Batteries.Vector.instGetElemNatLt","className":"GetElem"},{"typeNames":["Batteries.Vector","Batteries.Vector","Batteries.Vector"],"name":"Batteries.Vector.instHAppendHAddNat","className":"HAppend"},{"typeNames":["Batteries.Vector"],"name":"Batteries.Vector.instBEq","className":"BEq"}],"imports":["Init","Batteries.Data.Array","Batteries.Data.List.Basic","Batteries.Data.List.Lemmas","Batteries.Tactic.Alias","Batteries.Tactic.Lint.Misc","Batteries.Tactic.PrintPrefix"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L304-L308","name":"Batteries.Vector.allDiff","line":304,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.allDiff","doc":"Returns `true` when all elements of the vector are pairwise distinct using `==` for comparison.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.allDiff\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">allDiff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L300-L302","name":"Batteries.Vector.isPrefixOf","line":300,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.isPrefixOf","doc":"Returns `true` when `v` is a prefix of the vector `w`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.isPrefixOf\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">isPrefixOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L293-L298","name":"Batteries.Vector.indexOf?","line":293,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.indexOf?","doc":"Finds the first index of a given value in a vector using `==` for comparison. Returns `none` if the\nno element of the index matches the given value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.indexOf?\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">indexOf?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L286-L291","name":"Batteries.Vector.eraseIdxN","line":286,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.eraseIdxN","doc":"Delete an element of a vector using a `Nat` index. By default, the `get_elem_tactic` is used to\nsynthesise a proof that the index is within bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.eraseIdxN\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">eraseIdxN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span> <a href=\"./Batteries/Data/Vector/Basic.html#_auto._@.Batteries.Data.Vector.Basic._hyg.1924\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L279-L284","name":"Batteries.Vector.tail","line":279,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.tail","doc":"Delete the first element of a vector. Returns the empty vector if the input vector is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.tail\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L271-L277","name":"Batteries.Vector.eraseIdx!","line":271,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.eraseIdx!","doc":"Delete an element of a vector using a `Nat` index. Panics if the index is out of bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.eraseIdx!\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">eraseIdx!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L267-L269","name":"Batteries.Vector.feraseIdx","line":267,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.feraseIdx","doc":"Delete an element of a vector using a `Fin` index. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.feraseIdx\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">feraseIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L263-L265","name":"Batteries.Vector.reverse","line":263,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.reverse","doc":"Reverse the elements of a vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L258-L259","name":"Batteries.Vector.instBEq","line":258,"kind":"instance","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.instBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.instBEq\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">instBEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L251-L256","name":"Batteries.Vector.isEqv","line":251,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.isEqv","doc":"Compares two vectors of the same size using a given boolean relation `r`. `isEqv v w r` returns\n`true` if and only if `r v[i] w[i]` is true for all indices `i`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.isEqv\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">isEqv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L244-L249","name":"Batteries.Vector.drop","line":244,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.drop","doc":"Deletes the first `m` elements of a vector. If `m` is greater than or equal to the size of the\nvector then the empty vector is returned.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.drop\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L242-L242","name":"Batteries.Vector.shrink","line":242,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.shrink","doc":"**Alias** of `Batteries.Vector.take`.\n\n---\n\nExtract the first `m` elements of a vector. If `m` is greater than or equal to the size of the\nvector then the vector is returned unchanged.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.shrink\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">shrink</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L235-L240","name":"Batteries.Vector.take","line":235,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.take","doc":"Extract the first `m` elements of a vector. If `m` is greater than or equal to the size of the\nvector then the vector is returned unchanged.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.take\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L232-L233","name":"Batteries.Vector.range","line":232,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.range","doc":"The vector `#v[0,1,2,...,n-1]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.range\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">range</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L222-L230","name":"Batteries.Vector.swapAt!","line":222,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.swapAt!","doc":"Swaps an element of a vector with a given value using a `Nat` index. Panics if the index is out of\nbounds. The original value is returned along with the updated vector.\n\nThis will perform the update destructively provided that the vector has a reference count of 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.swapAt!\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">swapAt!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L210-L220","name":"Batteries.Vector.swapAtN","line":210,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.swapAtN","doc":"Swaps an element of a vector with a given value using a `Nat` index. By default, the\n`get_elem_tactic` is used to synthesise a proof that the index is within bounds. The original value\nis returned along with the updated vector.\n\nThis will perform the update destructively provided that the vector has a reference count of 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.swapAtN\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">swapAtN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span> <a href=\"./Batteries/Data/Vector/Basic.html#_auto._@.Batteries.Data.Vector.Basic._hyg.1475\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L200-L208","name":"Batteries.Vector.swapAt","line":200,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.swapAt","doc":"Swaps an element of a vector with a given value using a `Fin` index. The original value is returned\nalong with the updated vector.\n\nThis will perform the update destructively provided that the vector has a reference count of 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.swapAt\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">swapAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L192-L198","name":"Batteries.Vector.swap!","line":192,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.swap!","doc":"Swap two elements of a vector using `Nat` indices. Panics if either index is out of bounds.\n\nThis will perform the update destructively provided that the vector has a reference count of 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.swap!\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">swap!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L182-L190","name":"Batteries.Vector.swapN","line":182,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.swapN","doc":"Swap two elements of a vector using `Nat` indices. By default, the `get_elem_tactic` is used to\nsynthesize proofs that the indices are within bounds.\n\nThis will perform the update destructively provided that the vector has a reference count of 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.swapN\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">swapN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span> <a href=\"./Batteries/Data/Vector/Basic.html#_auto._@.Batteries.Data.Vector.Basic._hyg.1360\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hj : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span> <a href=\"./Batteries/Data/Vector/Basic.html#_auto._@.Batteries.Data.Vector.Basic._hyg.1368\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L174-L180","name":"Batteries.Vector.swap","line":174,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.swap","doc":"Swap two elements of a vector using `Fin` indices.\n\nThis will perform the update destructively provided that the vector has a reference count of 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.swap\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L170-L172","name":"Batteries.Vector.ofFn","line":170,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.ofFn","doc":"The vector of length `n` whose `i`-th element is `f i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.ofFn\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L166-L168","name":"Batteries.Vector.zipWith","line":166,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.zipWith","doc":"Maps corresponding elements of two vectors of equal size using the function `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.zipWith\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">zipWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{φ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">φ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">φ</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L162-L164","name":"Batteries.Vector.map","line":162,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.map","doc":"Maps elements of a vector using the function `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.map\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L155-L160","name":"Batteries.Vector.extract","line":155,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.extract","doc":"Extracts the slice of a vector from indices `start` to `stop` (exclusive). If `start ≥ stop`, the\nresult is empty. If `stop` is greater than the size of the vector, the size is used instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.extract\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(start : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stop : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">stop</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">start</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L151-L153","name":"Batteries.Vector.cast","line":151,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.cast","doc":"Creates a vector from another with a provably equal length. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.cast\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L148-L149","name":"Batteries.Vector.instHAppendHAddNat","line":148,"kind":"instance","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.instHAppendHAddNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.instHAppendHAddNat\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">instHAppendHAddNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HAppend\">HAppend</a> <span class=\"fn\">(<a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L144-L146","name":"Batteries.Vector.append","line":144,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.append","doc":"Append two vectors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.append\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L136-L142","name":"Batteries.Vector.set!","line":136,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.set!","doc":"Set an element in a vector using a `Nat` index. Panics if the index is out of bounds.\n\nThis will perform the update destructively provided that the vector has a reference count of 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.set!\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">set!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L127-L134","name":"Batteries.Vector.setD","line":127,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.setD","doc":"Set an element in a vector using a `Nat` index. Returns the vector unchanged if the index is out of\nbounds.\n\nThis will perform the update destructively provided that the vector has a reference count of 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.setD\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">setD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L118-L125","name":"Batteries.Vector.setN","line":118,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.setN","doc":"Set an element in a vector using a `Nat` index. By default, the `get_elem_tactic` is used to\nsynthesize a proof that the index is within bounds.\n\nThis will perform the update destructively provided that the vector has a reference count of 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.setN\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">setN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span> <a href=\"./Batteries/Data/Vector/Basic.html#_auto._@.Batteries.Data.Vector.Basic._hyg.982\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L110-L116","name":"Batteries.Vector.set","line":110,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.set","doc":"Set an element in a vector using a `Fin` index.\n\nThis will perform the update destructively provided that the vector has a reference count of 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.set\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L106-L108","name":"Batteries.Vector.pop","line":106,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.pop","doc":"Remove the last element of a vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.pop\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">pop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L102-L104","name":"Batteries.Vector.push","line":102,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.push","doc":"Push an element `x` to the end of a vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.push\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L99-L100","name":"Batteries.Vector.head","line":99,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.head","doc":"The first element of a non-empty vector.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.head\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L93-L97","name":"Batteries.Vector.back","line":93,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.back","doc":"The last element of a non-empty vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.back\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">back</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L90-L91","name":"Batteries.Vector.back?","line":90,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.back?","doc":"The last element of a vector, or `none` if the array is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.back?\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">back?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L87-L88","name":"Batteries.Vector.back!","line":87,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.back!","doc":"The last element of a vector. Panics if the vector is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.back!\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">back!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L81-L85","name":"Batteries.Vector.getD","line":81,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.getD","doc":"Get an element of a vector using a `Nat` index. Returns the given default value if the index is out\nof bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.getD\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(default : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L78-L79","name":"Batteries.Vector.instGetElemNatLt","line":78,"kind":"instance","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.instGetElemNatLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.instGetElemNatLt\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">instGetElemNatLt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/GetElem.html#GetElem\">GetElem</a> <span class=\"fn\">(<a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) =&gt; <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L74-L76","name":"Batteries.Vector.uget","line":74,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.uget","doc":"Get an element of a vector using a `USize` index and a proof that the index is within bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.uget\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">uget</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L70-L72","name":"Batteries.Vector.get","line":70,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.get","doc":"Get an element of a vector using a `Fin` index. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.get\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L67-L68","name":"Batteries.Vector.instInhabited","line":67,"kind":"instance","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.instInhabited\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L64-L65","name":"Batteries.Vector.singleton","line":64,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.singleton","doc":"Returns a vector of size `1` with element `v`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.singleton\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L61-L62","name":"Batteries.Vector.mkVector","line":61,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.mkVector","doc":"Makes a vector of size `n` with all cells containing `v`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.mkVector\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mkVector</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L58-L59","name":"Batteries.Vector.mkEmpty","line":58,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.mkEmpty","doc":"Make an empty vector with pre-allocated capacity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.mkEmpty\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mkEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(capacity : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L55-L56","name":"Batteries.Vector.empty","line":55,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.empty","doc":"The empty vector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.empty\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L48-L53","name":"Batteries.Vector.elimAsList","line":48,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.elimAsList","doc":"Custom eliminator for `Vector α n` through `List α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.elimAsList\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">elimAsList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mk : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">{ <span class=\"fn\">toList</span> := <span class=\"fn\">a</span>, <span class=\"fn\">size_toArray</span> := <span class=\"fn\">ha</span> }</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L41-L46","name":"Batteries.Vector.elimAsArray","line":41,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.elimAsArray","doc":"Custom eliminator for `Vector α n` through `Array α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.elimAsArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">elimAsArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mk : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">{ <span class=\"fn\">toArray</span> := <span class=\"fn\">a</span>, <span class=\"fn\">size_toArray</span> := <span class=\"fn\">ha</span> }</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L34-L35","name":"Batteries.Vector.«term#v[_,]»","line":34,"kind":"def","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.«term#v[_,]»","doc":"Syntax for `Vector α n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.«term#v[_,]»\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">«term#v[_,]»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L32-L32","name":"Batteries.Vector.size_eq","line":32,"kind":"theorem","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.size_eq","doc":"**Alias** of `Batteries.Vector.size_toArray`.\n\n---\n\nArray size. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.size_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">size_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L26-L26","name":"Batteries.instDecidableEqVector","line":26,"kind":"instance","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.instDecidableEqVector","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.instDecidableEqVector\"><span class=\"name\">Batteries</span>.<span class=\"name\">instDecidableEqVector</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L26-L26","name":"Batteries.instReprVector","line":26,"kind":"instance","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.instReprVector","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.instReprVector\"><span class=\"name\">Batteries</span>.<span class=\"name\">instReprVector</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L25-L25","name":"Batteries.Vector.size_toArray","line":25,"kind":"theorem","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.size_toArray","doc":"Array size. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.size_toArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">size_toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L23-L23","name":"Batteries.Vector.mk","line":23,"kind":"ctor","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toArray : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(size_toArray : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toArray</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\">Batteries.Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/c933dd9b00271d869e22b802a015092d1e8e454a/Batteries/Data/Vector/Basic.lean#L22-L26","name":"Batteries.Vector","line":22,"kind":"structure","docLink":"./Batteries/Data/Vector/Basic.html#Batteries.Vector","doc":"`Vector α n` is an `Array α` with size `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Vector/Basic.html#Batteries.Vector\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Init/Prelude.html#Array\"><span class=\"name\">Array</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}